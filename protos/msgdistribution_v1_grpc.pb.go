// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: protos/msgdistribution_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageDistributionClient is the client API for MessageDistribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDistributionClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendEmptyReply, error)
	SendMessages(ctx context.Context, in *SendMessagesRequest, opts ...grpc.CallOption) (*SendEmptyReply, error)
	SendMessageToRecipient(ctx context.Context, in *SendMessageWithRecipientRequest, opts ...grpc.CallOption) (*SendEmptyReply, error)
	SendMessageToRecipients(ctx context.Context, in *SendMessageWithRecipientsRequest, opts ...grpc.CallOption) (*SendEmptyReply, error)
}

type messageDistributionClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDistributionClient(cc grpc.ClientConnInterface) MessageDistributionClient {
	return &messageDistributionClient{cc}
}

func (c *messageDistributionClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendEmptyReply, error) {
	out := new(SendEmptyReply)
	err := c.cc.Invoke(ctx, "/msgdistribution_v1.MessageDistribution/send_message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDistributionClient) SendMessages(ctx context.Context, in *SendMessagesRequest, opts ...grpc.CallOption) (*SendEmptyReply, error) {
	out := new(SendEmptyReply)
	err := c.cc.Invoke(ctx, "/msgdistribution_v1.MessageDistribution/send_messages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDistributionClient) SendMessageToRecipient(ctx context.Context, in *SendMessageWithRecipientRequest, opts ...grpc.CallOption) (*SendEmptyReply, error) {
	out := new(SendEmptyReply)
	err := c.cc.Invoke(ctx, "/msgdistribution_v1.MessageDistribution/send_message_to_recipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDistributionClient) SendMessageToRecipients(ctx context.Context, in *SendMessageWithRecipientsRequest, opts ...grpc.CallOption) (*SendEmptyReply, error) {
	out := new(SendEmptyReply)
	err := c.cc.Invoke(ctx, "/msgdistribution_v1.MessageDistribution/send_message_to_recipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageDistributionServer is the server API for MessageDistribution service.
// All implementations must embed UnimplementedMessageDistributionServer
// for forward compatibility
type MessageDistributionServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendEmptyReply, error)
	SendMessages(context.Context, *SendMessagesRequest) (*SendEmptyReply, error)
	SendMessageToRecipient(context.Context, *SendMessageWithRecipientRequest) (*SendEmptyReply, error)
	SendMessageToRecipients(context.Context, *SendMessageWithRecipientsRequest) (*SendEmptyReply, error)
	mustEmbedUnimplementedMessageDistributionServer()
}

// UnimplementedMessageDistributionServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDistributionServer struct {
}

func (UnimplementedMessageDistributionServer) SendMessage(context.Context, *SendMessageRequest) (*SendEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageDistributionServer) SendMessages(context.Context, *SendMessagesRequest) (*SendEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedMessageDistributionServer) SendMessageToRecipient(context.Context, *SendMessageWithRecipientRequest) (*SendEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToRecipient not implemented")
}
func (UnimplementedMessageDistributionServer) SendMessageToRecipients(context.Context, *SendMessageWithRecipientsRequest) (*SendEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToRecipients not implemented")
}
func (UnimplementedMessageDistributionServer) mustEmbedUnimplementedMessageDistributionServer() {}

// UnsafeMessageDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDistributionServer will
// result in compilation errors.
type UnsafeMessageDistributionServer interface {
	mustEmbedUnimplementedMessageDistributionServer()
}

func RegisterMessageDistributionServer(s grpc.ServiceRegistrar, srv MessageDistributionServer) {
	s.RegisterService(&MessageDistribution_ServiceDesc, srv)
}

func _MessageDistribution_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDistributionServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgdistribution_v1.MessageDistribution/send_message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDistributionServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDistribution_SendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDistributionServer).SendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgdistribution_v1.MessageDistribution/send_messages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDistributionServer).SendMessages(ctx, req.(*SendMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDistribution_SendMessageToRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageWithRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDistributionServer).SendMessageToRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgdistribution_v1.MessageDistribution/send_message_to_recipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDistributionServer).SendMessageToRecipient(ctx, req.(*SendMessageWithRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDistribution_SendMessageToRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageWithRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDistributionServer).SendMessageToRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgdistribution_v1.MessageDistribution/send_message_to_recipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDistributionServer).SendMessageToRecipients(ctx, req.(*SendMessageWithRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageDistribution_ServiceDesc is the grpc.ServiceDesc for MessageDistribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDistribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msgdistribution_v1.MessageDistribution",
	HandlerType: (*MessageDistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send_message",
			Handler:    _MessageDistribution_SendMessage_Handler,
		},
		{
			MethodName: "send_messages",
			Handler:    _MessageDistribution_SendMessages_Handler,
		},
		{
			MethodName: "send_message_to_recipient",
			Handler:    _MessageDistribution_SendMessageToRecipient_Handler,
		},
		{
			MethodName: "send_message_to_recipients",
			Handler:    _MessageDistribution_SendMessageToRecipients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/msgdistribution_v1.proto",
}
